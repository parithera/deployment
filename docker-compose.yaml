name: parithera

services:
  rabbitmq:
    restart: always
    image: rabbitmq:4.0.2-management-alpine
    env_file:
      - .env.amqp
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 10s
      timeout: 10s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: "1"
          memory: 1G
        reservations:
          cpus: "1"
          memory: 500M

  db:
    image: postgres:17.0-alpine
    restart: always
    # set shared memory limit when using docker-compose
    shm_size: 128mb
    # or set shared memory limit when deploy via swarm stack
    #volumes:
    #  - type: tmpfs
    #    target: /dev/shm
    #    tmpfs:
    #      size: 134217728 # 128*2^20 bytes = 128Mb
    volumes:
      - ./docker-entrypoint-initdb:/docker-entrypoint-initdb.d/
      - ../../dump:/dump
      - db_data_container:/var/lib/postgresql/data/pgdata
    ports:
      - 5432:5432
    env_file:
      - .env.database

  pg_bouncer:
    image: bitnami/pgbouncer
    restart: always
    depends_on:
      - db
    env_file:
      - .env.database
    ports:
      - 6432:6432

  adminer:
    image: adminer
    restart: always
    command:
      [
        "php",
        "-d",
        "memory_limit=-1",
        "-d",
        "post_max_size=500M",
        "-d",
        "upload_max_filesize=500M",
        "-S",
        "0.0.0.0:8080",
        "-t",
        "/var/www/html",
      ]

  api:
    image: codeclarityce/api
    env_file:
      - .env.api
      - .env.mail
      - .env.amqp
      - .env.database
    restart: always
    depends_on:
      rabbitmq:
        condition: service_healthy
      db:
        condition: service_started
      pg_bouncer:
        condition: service_started
      adminer:
        condition: service_started
    volumes:
      - ./jwt:/home/codeclarity/app/jwt
      - .env.api:/home/codeclarity/app/env/.env.prod
      # - projects:/private
      - ../private:/private
    deploy:
      resources:
        limits:
          cpus: "2"
          memory: 1G
        reservations:
          cpus: "1"
          memory: 500M

  frontend:
    image: parithera/frontend
    env_file:
      - .env.frontend
    restart: always
    ports:
      # HTTP
      - target: 80
        published: ${HTTP_PORT:-80}
        protocol: tcp
      # HTTPS
      - target: 443
        published: ${HTTPS_PORT:-443}
        protocol: tcp
      # HTTP/3
      - target: 443
        published: ${HTTP3_PORT:-443}
        protocol: udp
      # Rabbitmq
      - target: 15672
        published: 15672
        protocol: tcp
      # API
      - target: 3000
        published: 3000
        protocol: tcp
      # ADMINER
      - target: 8080
        published: 8080
        protocol: tcp
    volumes:
      - caddy_data:/data
      - caddy_config:/config
      - ./config/Caddyfile:/etc/caddy/Caddyfile:ro
      # Uncomment the following line to use your own certificates
      # - ./certs:/etc/caddy/certs:ro
    command: [ "caddy", "run", "--config", "/etc/caddy/Caddyfile", "--adapter", "caddyfile", "--watch" ]
    deploy:
      resources:
        limits:
          cpus: "2"
          memory: 2G
        reservations:
          cpus: "1"
          memory: 500M

  service-dispatcher:
    image: codeclarityce/service-dispatcher
    restart: always
    depends_on:
      rabbitmq:
        condition: service_healthy
      db:
        condition: service_started
      pg_bouncer:
        condition: service_started
      adminer:
        condition: service_started
    env_file:
      - .env.amqp
      - .env.codeclarity
      - .env.database
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: 500M
        reservations:
          cpus: "0.25"
          memory: 250M

  # plugin-r:
  #   image: ceherzog/plugin-r
  #   restart: always
  #   depends_on:
  #     rabbitmq:
  #       condition: service_healthy
  #     db:
  #       condition: service_started
  #     pg_bouncer:
  #       condition: service_started
  #     adminer:
  #       condition: service_started
  #   volumes:
  #     # - projects:/private
  #     - ../private:/private
  #     - ./r_scripts:/home/codeclarity/r/r_scripts:ro
  #   env_file:
  #     - .env.codeclarity
  #     - .env.database
  #     - .env.amqp

  plugin-fastp:
    image: parithera/plugin-fastp
    restart: always
    depends_on:
      rabbitmq:
        condition: service_healthy
      db:
        condition: service_started
      pg_bouncer:
        condition: service_started
      adminer:
        condition: service_started
    volumes:
      # - projects:/private
      - ../private:/private
    env_file:
      - .env.codeclarity
      - .env.database
      - .env.amqp

  plugin-fastqc:
    image: parithera/plugin-fastqc
    restart: always
    depends_on:
      rabbitmq:
        condition: service_healthy
      db:
        condition: service_started
      pg_bouncer:
        condition: service_started
      adminer:
        condition: service_started
    volumes:
      # - projects:/private
      - ../private:/private
    env_file:
      - .env.codeclarity
      - .env.database
      - .env.amqp

  plugin-multiqc:
    image: parithera/plugin-multiqc
    restart: always
    depends_on:
      rabbitmq:
        condition: service_healthy
      db:
        condition: service_started
      pg_bouncer:
        condition: service_started
      adminer:
        condition: service_started
    volumes:
      # - projects:/private
      - ../private:/private
    env_file:
      - .env.codeclarity
      - .env.database
      - .env.amqp

  plugin-python:
    image: parithera/plugin-python
    restart: always
    depends_on:
      rabbitmq:
        condition: service_healthy
      db:
        condition: service_started
      pg_bouncer:
        condition: service_started
      adminer:
        condition: service_started
    volumes:
      # - projects:/private
      - ../private:/private
    env_file:
      - .env.codeclarity
      - .env.database
      - .env.amqp

  plugin-scanpy:
    image: parithera/plugin-scanpy
    restart: always
    depends_on:
      rabbitmq:
        condition: service_healthy
      db:
        condition: service_started
      pg_bouncer:
        condition: service_started
      adminer:
        condition: service_started
    volumes:
      # - projects:/private
      - ../private:/private
    env_file:
      - .env.codeclarity
      - .env.database
      - .env.amqp
    deploy:
      resources:
        limits:
          cpus: "4"
          memory: 8G
        reservations:
          cpus: "2"
          memory: 6G

  plugin-star:
    image: parithera/plugin-star
    restart: always
    depends_on:
      rabbitmq:
        condition: service_healthy
      db:
        condition: service_started
      pg_bouncer:
        condition: service_started
      adminer:
        condition: service_started
    volumes:
      # - projects:/private
      - ../private:/private
      - ../backend/plugins/star/.cloud/docker/data/genes:/genes
      - ../backend/plugins/star/.cloud/docker/data/whitelists:/whitelists
    env_file:
      - .env.codeclarity
      - .env.database
      - .env.amqp
    environment:
      - GOMAXPROCS=12
    deploy:
      resources:
        limits:
          cpus: "12"
          memory: 40G
        reservations:
          cpus: "12"
          memory: 35G

volumes:
  caddy_data:
  caddy_config:

  results_db_data_container:
  results_db_apps_data_container:
  db_data_container:

  projects:
